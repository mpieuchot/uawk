.\"	$OpenBSD: awk.1,v 1.45 2019/05/26 01:16:09 naddy Exp $
.\"
.\" Copyright (C) Lucent Technologies 1997
.\" All Rights Reserved
.\"
.\" Permission to use, copy, modify, and distribute this software and
.\" its documentation for any purpose and without fee is hereby
.\" granted, provided that the above copyright notice appear in all
.\" copies and that both that the copyright notice and this
.\" permission notice and warranty disclaimer appear in supporting
.\" documentation, and that the name Lucent Technologies or any of
.\" its entities not be used in advertising or publicity pertaining
.\" to distribution of the software without specific, written prior
.\" permission.
.\"
.\" LUCENT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
.\" INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.
.\" IN NO EVENT SHALL LUCENT OR ANY OF ITS ENTITIES BE LIABLE FOR ANY
.\" SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
.\" IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
.\" ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
.\" THIS SOFTWARE.
.\"
.Dd $Mdocdate: May 26 2019 $
.Dt UAWK 1
.Os
.Sh NAME
.Nm uawk
.Nd pattern-directed scanning and processing language
.Sh SYNOPSIS
.Nm uawk
.Op Fl d
.Op Ar prog | Fl f Ar progfile
.Ar
.Sh DESCRIPTION
.Nm
scans each input
.Ar file
for lines that match any of a set of patterns specified literally in
.Ar prog
or in one or more files specified as
.Fl f Ar progfile .
With each pattern there can be an associated action that will be performed
when a line of a
.Ar file
matches the pattern.
Each line is matched against the
pattern portion of every pattern-action statement;
the associated action is performed for each matched pattern.
The file name
.Sq -
means the standard input.
.Pp
The options are as follows:
.Bl -tag -width "-f progfile"
.It Fl d
Enable debugging.
A second use of
.Fl d
will cause
.Nm
to dump core on fatal errors.
.It Fl f Ar progfile
Read program code from the specified file
.Ar progfile
instead of from the command line.
.El
.Sh SYNTAX
The input is made up of input lines
.Pq records
separated by newlines.
.Pp
An input line is made up of fields separated by whitespace.
The fields are denoted
.Va $1 , $2 , ... ,
while
.Va $0
refers to the entire line.
The input line is split into one field per character.
.Pp
A pattern-action statement has the form
.Pp
.D1 Ar pattern Ic \&{ Ar action Ic \&}
.Pp
A missing
.Ic \&{ Ar action Ic \&}
means print the line;
a missing pattern always matches.
Pattern-action statements are separated by newlines or semicolons.
.Pp
Newlines are permitted after a terminating statement or an open brace
.Pq Sq { ,
after the
.Sq else
keyword
or after the closing parenthesis of an
.Sq if
statement.
Additionally, a backslash
.Pq Sq \e
can be used to escape a newline between tokens.
.Pp
An action is a sequence of statements.
A statement can be one of the following:
.Pp
.Bl -tag -width Ds -offset indent -compact
.It Ic if Ar ( expression ) Ar statement Op Ic else Ar statement
.It Xo Ic {
.Op Ar statement ...
.Ic }
.Xc
.It Xo Ar expression
.No # commonly
.Ar var No = Ar expression
.Xc
.It Xo Ic print Ar ( expression-list, ... )
.Xc
.It Xo Ic printf Ar ( format Op Ar expression-list, ... )
.Xc
.It Xo Ic exit
.Op Ar expression
.No # exit immediately; status is Ar expression
.Xc
.El
.Pp
Statements are terminated by
semicolons, newlines or right braces.
String constants are quoted
.Li \&"" ,
with the usual C escapes recognized within
(see
.Xr printf 1
for a complete list of these).
Expressions take on string or numeric values as appropriate,
and are built using the operators
.Ic + \- * / %
and concatenation
.Pq indicated by whitespace .
The operators
.Ic ++ \-\- += \-= *= /= %=
.Ic > >= < <= == != ?:
are also available in expressions.
Variables may be scalars
or fields.
They are initialized to the null string.
.Pp
The
.Ic print
statement prints its
.Ar expression-lists
on the standard output
The
.Ic printf
statement formats its
.Ar expression-list
according to the
.Ar format
(see
.Xr printf 1 ) .
.Pp
Patterns are relational expressions:
.Pp
.Bl -tag -width Ds -offset indent -compact
.It Ar expression relop expression
.El
.Pp
where a
.Ar relop
is any of the six relational operators in C.
A conditional is an arithmetic expression or a relational expression.
.Pp
The special patterns
.Ic BEGIN
and
.Ic END
may be used to capture control before the first input line is read
and after the last.
.Ic BEGIN
and
.Ic END
do not combine with other patterns.
Variable names with special meanings:
.Pp
.Bl -tag -width "NR " -compact
.It Va NR
Ordinal number of the current record.
.El
.Sh EXIT STATUS
.Ex -std
.Pp
But note that the
.Ic exit
expression can modify the exit status.
.Sh EXAMPLES
Print first two fields in opposite order:
.Pp
.Dl { print($2, $1) }
.Pp
Add up first column, print sum and average:
.Bd -literal -offset indent
{ s += $1 }
END { print("sum is", s, " average is", s/NR) }
.Ed
.Pp
Print a message:
.Bd -literal -offset indent
{ print("hello there!") }
.Ed
.Sh SEE ALSO
.Xr awk 1 ,
.Xr printf 1
.Sh BUGS
There are no explicit conversions between numbers and strings.
To force an expression to be treated as a number add 0 to it;
to force it to be treated as a string concatenate
.Li \&""
to it.
